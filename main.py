# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test5.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import html.parser
import requests as rq
from bs4 import BeautifulSoup as bs
from PyQt5.QtWidgets import QMessageBox, QTextBrowser
import re
from PyQt5.QtGui import *
from PyQt5.QtCore import *


class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()
        
    
    def setupUi(self, MainWindow):
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setStyleSheet("background-color: lightblue;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.submit1 = QtWidgets.QPushButton(self.centralwidget)
        self.submit1.setGeometry(QtCore.QRect(290, 290, 93, 28))
        self.submit1.setObjectName("Standart")
        self.submit1.setStyleSheet("background-color: blue;color:white")
        
        self.submit2 = QtWidgets.QPushButton(self.centralwidget)
        self.submit2.setGeometry(QtCore.QRect(290, 370, 93, 28))
        self.submit2.setObjectName("Alternative")
        self.submit2.setStyleSheet("background-color: blue;color:White")

        self.submit3 = QtWidgets.QPushButton(self.centralwidget)
        self.submit3.setGeometry(QtCore.QRect(210, 450, 250, 28))
        self.submit3.setObjectName("Emergency")
        self.submit3.setStyleSheet("background-color: blue;color:white")


        self.userinput = QtWidgets.QLineEdit(self.centralwidget)
        self.userinput.setGeometry(QtCore.QRect(90, 200, 531, 41))
        self.userinput.setObjectName("userinput")
        self.userinput.setStyleSheet("background-color: white;")
        self.refresh = QtWidgets.QPushButton(self.centralwidget)
        self.refresh.setGeometry(QtCore.QRect(290, 330, 93, 28))
        self.refresh.setObjectName("refresh")
        self.refresh.setStyleSheet("background-color: gray;")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(230, 70, 301, 71))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.tb = QtWidgets.QTextBrowser(self.centralwidget)
        self.tb.setGeometry(QtCore.QRect(90,410,531,28))
        self.tb.setObjectName("tb")
        self.tb.setAcceptRichText(True)
        self.tb.setOpenExternalLinks(True)
        self.tb.setStyleSheet("background-color: white;")
        self.label2 = QtWidgets.QLabel(self.centralwidget)
        self.label2.setText("Enter FB Url")
        self.label2.setGeometry(90,170,200,28)
        font2 = QtGui.QFont()
        font2.setPointSize(13)
        self.label2.setFont(font2)
        
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.submit1.clicked.connect(self.embedpost)
        self.submit2.clicked.connect(self.textpost)
        self.submit3.clicked.connect(self.emergency)
        self.refresh.clicked.connect(self.clear_text)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def embedpost(self): #Our function to scrape the Post ID from Facebook
        try:
            input_link = self.userinput.text()
            link = str(input_link).replace("www","m")
            res = rq.get(link)
            soup_data = bs(res.text, 'html.parser')
            concl = soup_data.find_all('div',{'class' : 'bo bp'})

            s = str(concl[0]).split(",")
            global final_result
            final_result = s[1]
            # msg = QMessageBox()
            # msg.setWindowTitle("Post ID")
            # msg.setText(final_result)
            # msg.setIcon(QMessageBox.Information)
            # msg.setStandardButtons(QMessageBox.Ok)
            self.tb.append(final_result)
            # x = msg.exec_()
        except:
            self.tb.append("Alternatif deneyin")
    def textpost(self): # Our alternative function to scrape ID from permalink Facebook Posts
        
        try:
            link = self.userinput.text()
            link = link.replace("www.","m.")
            res = rq.get(link)
            soup_data = bs(res.text, 'html.parser')
            concl = soup_data.select("div.bo.bp")

    
            s = str(concl[0]).split(",")
            final_result = s[0].split('"')[3]+ " : " + s[0].split('"')[5]
            # # Uncomment this block if you wish to get the result inside Message Box using "Alternative" Button
            # msg = QMessageBox()  
            # msg.setWindowTitle("Post ID")
            # msg.setText(final_result)
            # msg.setIcon(QMessageBox.Information)
            # msg.setStandardButtons(QMessageBox.Ok)
            # x = msg.exec_()
            self.tb.append(final_result) #Write the output to text browser
        except Exception as exc:
            self.tb.append(str(exc))
        
    def emergency(self):
            
        try:
            pattern = re.compile(r'(id)*\w{9,11}[:"][:"]\d{15,17}')
            link = self.userinput.text()
            res = rq.get(link)
            soup_data = bs(res.text, 'html.parser')

            global final_result
            s = soup_data.prettify()

            matches = pattern.finditer(s)

            for match in matches:
                if 'fbid' in match[0]:
                    self.tb.append(match[0])
                    
                else:
                    continue
            
                
            # self.tb.append(final_result) #Write the output to text browser
        except Exception as exc:
            self.tb.append(str(exc))
        
    
        
        
    # def push_here(self):  #Our function of message box, uncomment if you wish to use
    #     msg = QMessageBox()
    #     msg.setWindowTitle("Post ID")
    #     msg.setText("sonuc")
    #     msg.setIcon(QMessageBox.Information)
    #     msg.setStandardButtons(QMessageBox.Ok)
    def clear_text(self):
        self.userinput.clear()
        self.tb.clear()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.submit1.setText(_translate("MainWindow", "Standart"))
        self.submit2.setText(_translate("MainWindow", "Alternative"))
        self.submit3.setText(_translate("MainWindow", "Emergency(Only use when needed)"))
        self.refresh.setText(_translate("MainWindow", "Refresh"))
        self.label.setText(_translate("MainWindow", "Post ID Finder"))
        self.label2.setText(_translate("MainWindow","Enter FB Url"))
        self.tb.setText(_translate("MainWindow", ""))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
